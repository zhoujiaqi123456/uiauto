# coding=utf-8from selenium import webdriverfrom selenium.webdriver.support.wait import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.common.action_chains import ActionChainsclass Login(object):    def login_without_qr(self, browser, account, password):        """        :param browser: 浏览器        :param account: 账号        :param password: 密码        :return: 0-发生错误；1-未发生错误        """        # 获取浏览器当前标签页句柄        current_window = browser.current_window_handle        # 新开标签页打开网址        url = "http://47.99.104.87:6773/#/login"        js = 'window.open("' + url + '");'        print(js)        browser.execute_script(js)        # 页面中点击某个链接会弹出一个新的窗口，这样要去操作新窗口中的元素，这时就需要主机切换到新窗口进行操作。        # 定位到新开页面的句柄        handles = browser.window_handles        for handle in handles:            if handle == current_window:                continue        browser.switch_to_window(handle)        # print browser.title        # browser.get(url)        browser.maximize_window()        # 输入账号        account_input = browser.find_element_by_id('email')        if account_input is None:            print('未找到账号输入框')            return 0        account_input.click()        account_input.send_keys(account)        # 输入密码        password_input = browser.find_element_by_id('password')        if password_input is None:            print('未找到密码输入框')            return 0        password_input.click()        password_input.send_keys(password)        # 点击登陆        submit_array = browser.find_elements_by_class_name('ant-btn-lg')        if len(submit_array) > 0:            submit_array[0].click()            # 等待元素加载            WebDriverWait(browser, 30, 0.5).until(                EC.presence_of_element_located((By.XPATH, '//*[@id="app"]/div/div/header/div[2]/a/div/p[1]'))            )            # 判断是否登录成功            real_account = browser.find_element_by_xpath('//*[@id="app"]/div/div/header/div[2]/a/div/p[1]').text            if real_account == account:                return 1            else:                print('登录失败')                return 0        else:            print('未获取到提交按钮')            return 0    # # 退出登录    # def logout(self, browser):    #     # 页面右上角账户悬停出现下拉框    #     viewBox = browser.find_element_by_xpath('//*[@id="app"]/div/div[1]/div[3]/div/div')    #     ActionChains(browser).move_to_element(viewBox).perform()    #     browser.find_element_by_xpath('//*[@id="app"]/div/div[1]/div[5]/div/div/ul/li[5]/a').click()if __name__ == "__main__":    # options = webdriver.ChromeOptions()    # options.debugger_address = "127.0.0.1:9222"    # browser = webdriver.Chrome(options=options)    browser = webdriver.Chrome()    # browser = webdriver.Chrome(R"/usr/local/bin/chromedriver")  # 制定chromedriver.exe驱动位置    account = "TAL0077"    password = "123456"    Login().login_without_qr(browser, account, password)    # chrome 一共有五个重要参数，每一个开启后都有不一样的地方，你开启的时候先去搞明白啥意思    # cookie1 = browser.get_cookies()    #    # print("删除前的cookie:" + str(cookie1))    # browser.delete_all_cookies()    # cookie2 = browser.get_cookies()    # print("删除后的cookie:" + str(cookie2))    # for cookie in browser.get_cookies():    #     print "%s/%s" % (cookie['name'], cookie['value'])    #     browser.delete_cookie(cookie['name'])    #     browser.delete_cookie(cookie['value'])